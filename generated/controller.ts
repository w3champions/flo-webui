/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.6
 * source: controller.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/wrappers";
import * as dependency_2 from "./google/protobuf/empty";
import * as dependency_3 from "./google/protobuf/timestamp";
import * as dependency_4 from "./player";
import * as dependency_5 from "./game";
import * as dependency_6 from "./node";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace controller {
    export enum GameStatusFilter {
        GameStatusFilterAll = 0,
        GameStatusFilterOpen = 1,
        GameStatusFilterLive = 2,
        GameStatusFilterEnded = 3
    }
    export class GetPlayerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player_id" in data && data.player_id != undefined) {
                    this.player_id = data.player_id;
                }
            }
        }
        get player_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set player_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            player_id?: number;
        }): GetPlayerRequest {
            const message = new GetPlayerRequest({});
            if (data.player_id != null) {
                message.player_id = data.player_id;
            }
            return message;
        }
        toObject() {
            const data: {
                player_id?: number;
            } = {};
            if (this.player_id != null) {
                data.player_id = this.player_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.player_id != 0)
                writer.writeInt32(1, this.player_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPlayerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPlayerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.player_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPlayerRequest {
            return GetPlayerRequest.deserialize(bytes);
        }
    }
    export class GetPlayerByTokenRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): GetPlayerByTokenRequest {
            const message = new GetPlayerByTokenRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPlayerByTokenRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPlayerByTokenRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPlayerByTokenRequest {
            return GetPlayerByTokenRequest.deserialize(bytes);
        }
    }
    export class GetPlayerReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player?: dependency_4.player.Player;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player" in data && data.player != undefined) {
                    this.player = data.player;
                }
            }
        }
        get player() {
            return pb_1.Message.getWrapperField(this, dependency_4.player.Player, 1) as dependency_4.player.Player;
        }
        set player(value: dependency_4.player.Player) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_player() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            player?: ReturnType<typeof dependency_4.player.Player.prototype.toObject>;
        }): GetPlayerReply {
            const message = new GetPlayerReply({});
            if (data.player != null) {
                message.player = dependency_4.player.Player.fromObject(data.player);
            }
            return message;
        }
        toObject() {
            const data: {
                player?: ReturnType<typeof dependency_4.player.Player.prototype.toObject>;
            } = {};
            if (this.player != null) {
                data.player = this.player.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_player)
                writer.writeMessage(1, this.player, () => this.player.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPlayerReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPlayerReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.player, () => message.player = dependency_4.player.Player.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPlayerReply {
            return GetPlayerReply.deserialize(bytes);
        }
    }
    export class GetPlayersBySourceIdsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            source?: dependency_4.player.PlayerSource;
            source_ids?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("source_ids" in data && data.source_ids != undefined) {
                    this.source_ids = data.source_ids;
                }
            }
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_4.player.PlayerSource.PlayerSourceTest) as dependency_4.player.PlayerSource;
        }
        set source(value: dependency_4.player.PlayerSource) {
            pb_1.Message.setField(this, 1, value);
        }
        get source_ids() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set source_ids(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            source?: dependency_4.player.PlayerSource;
            source_ids?: string[];
        }): GetPlayersBySourceIdsRequest {
            const message = new GetPlayersBySourceIdsRequest({});
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.source_ids != null) {
                message.source_ids = data.source_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                source?: dependency_4.player.PlayerSource;
                source_ids?: string[];
            } = {};
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.source_ids != null) {
                data.source_ids = this.source_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.source != dependency_4.player.PlayerSource.PlayerSourceTest)
                writer.writeEnum(1, this.source);
            if (this.source_ids.length)
                writer.writeRepeatedString(2, this.source_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPlayersBySourceIdsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPlayersBySourceIdsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.source = reader.readEnum();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPlayersBySourceIdsRequest {
            return GetPlayersBySourceIdsRequest.deserialize(bytes);
        }
    }
    export class GetPlayersBySourceIdsReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player_map?: Map<string, dependency_4.player.PlayerRef>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player_map" in data && data.player_map != undefined) {
                    this.player_map = data.player_map;
                }
            }
            if (!this.player_map)
                this.player_map = new Map();
        }
        get player_map() {
            return pb_1.Message.getField(this, 1) as any as Map<string, dependency_4.player.PlayerRef>;
        }
        set player_map(value: Map<string, dependency_4.player.PlayerRef>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            player_map?: {
                [key: string]: ReturnType<typeof dependency_4.player.PlayerRef.prototype.toObject>;
            };
        }): GetPlayersBySourceIdsReply {
            const message = new GetPlayersBySourceIdsReply({});
            if (typeof data.player_map == "object") {
                message.player_map = new Map(Object.entries(data.player_map).map(([key, value]) => [key, dependency_4.player.PlayerRef.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                player_map?: {
                    [key: string]: ReturnType<typeof dependency_4.player.PlayerRef.prototype.toObject>;
                };
            } = {};
            if (this.player_map.size > 0) {
                data.player_map = Object.fromEntries(Array.from(this.player_map).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.player_map) {
                writer.writeMessage(1, this.player_map, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPlayersBySourceIdsReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPlayersBySourceIdsReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.player_map as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_4.player.PlayerRef.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPlayersBySourceIdsReply {
            return GetPlayersBySourceIdsReply.deserialize(bytes);
        }
    }
    export class GetPlayerPingMapsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ids" in data && data.ids != undefined) {
                    this.ids = data.ids;
                }
            }
        }
        get ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set ids(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ids?: number[];
        }): GetPlayerPingMapsRequest {
            const message = new GetPlayerPingMapsRequest({});
            if (data.ids != null) {
                message.ids = data.ids;
            }
            return message;
        }
        toObject() {
            const data: {
                ids?: number[];
            } = {};
            if (this.ids != null) {
                data.ids = this.ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ids.length)
                writer.writePackedInt32(1, this.ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPlayerPingMapsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPlayerPingMapsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ids = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPlayerPingMapsRequest {
            return GetPlayerPingMapsRequest.deserialize(bytes);
        }
    }
    export class GetPlayerPingMapsReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ping_maps?: dependency_4.player.PlayerPingMap[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ping_maps" in data && data.ping_maps != undefined) {
                    this.ping_maps = data.ping_maps;
                }
            }
        }
        get ping_maps() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.player.PlayerPingMap, 1) as dependency_4.player.PlayerPingMap[];
        }
        set ping_maps(value: dependency_4.player.PlayerPingMap[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            ping_maps?: ReturnType<typeof dependency_4.player.PlayerPingMap.prototype.toObject>[];
        }): GetPlayerPingMapsReply {
            const message = new GetPlayerPingMapsReply({});
            if (data.ping_maps != null) {
                message.ping_maps = data.ping_maps.map(item => dependency_4.player.PlayerPingMap.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                ping_maps?: ReturnType<typeof dependency_4.player.PlayerPingMap.prototype.toObject>[];
            } = {};
            if (this.ping_maps != null) {
                data.ping_maps = this.ping_maps.map((item: dependency_4.player.PlayerPingMap) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ping_maps.length)
                writer.writeRepeatedMessage(1, this.ping_maps, (item: dependency_4.player.PlayerPingMap) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPlayerPingMapsReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPlayerPingMapsReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ping_maps, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.player.PlayerPingMap.deserialize(reader), dependency_4.player.PlayerPingMap));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPlayerPingMapsReply {
            return GetPlayerPingMapsReply.deserialize(bytes);
        }
    }
    export class UpdateAndGetPlayerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            source?: dependency_4.player.PlayerSource;
            source_id?: string;
            source_state?: dependency_4.player.PlayerSourceState;
            realm?: dependency_1.google.protobuf.StringValue;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("source_id" in data && data.source_id != undefined) {
                    this.source_id = data.source_id;
                }
                if ("source_state" in data && data.source_state != undefined) {
                    this.source_state = data.source_state;
                }
                if ("realm" in data && data.realm != undefined) {
                    this.realm = data.realm;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_4.player.PlayerSource.PlayerSourceTest) as dependency_4.player.PlayerSource;
        }
        set source(value: dependency_4.player.PlayerSource) {
            pb_1.Message.setField(this, 2, value);
        }
        get source_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set source_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get source_state() {
            return pb_1.Message.getWrapperField(this, dependency_4.player.PlayerSourceState, 4) as dependency_4.player.PlayerSourceState;
        }
        set source_state(value: dependency_4.player.PlayerSourceState) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_source_state() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get realm() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.StringValue, 5) as dependency_1.google.protobuf.StringValue;
        }
        set realm(value: dependency_1.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_realm() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            name?: string;
            source?: dependency_4.player.PlayerSource;
            source_id?: string;
            source_state?: ReturnType<typeof dependency_4.player.PlayerSourceState.prototype.toObject>;
            realm?: ReturnType<typeof dependency_1.google.protobuf.StringValue.prototype.toObject>;
        }): UpdateAndGetPlayerRequest {
            const message = new UpdateAndGetPlayerRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.source_id != null) {
                message.source_id = data.source_id;
            }
            if (data.source_state != null) {
                message.source_state = dependency_4.player.PlayerSourceState.fromObject(data.source_state);
            }
            if (data.realm != null) {
                message.realm = dependency_1.google.protobuf.StringValue.fromObject(data.realm);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                source?: dependency_4.player.PlayerSource;
                source_id?: string;
                source_state?: ReturnType<typeof dependency_4.player.PlayerSourceState.prototype.toObject>;
                realm?: ReturnType<typeof dependency_1.google.protobuf.StringValue.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.source_id != null) {
                data.source_id = this.source_id;
            }
            if (this.source_state != null) {
                data.source_state = this.source_state.toObject();
            }
            if (this.realm != null) {
                data.realm = this.realm.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.source != dependency_4.player.PlayerSource.PlayerSourceTest)
                writer.writeEnum(2, this.source);
            if (this.source_id.length)
                writer.writeString(3, this.source_id);
            if (this.has_source_state)
                writer.writeMessage(4, this.source_state, () => this.source_state.serialize(writer));
            if (this.has_realm)
                writer.writeMessage(5, this.realm, () => this.realm.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAndGetPlayerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAndGetPlayerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.source = reader.readEnum();
                        break;
                    case 3:
                        message.source_id = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.source_state, () => message.source_state = dependency_4.player.PlayerSourceState.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.realm, () => message.realm = dependency_1.google.protobuf.StringValue.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateAndGetPlayerRequest {
            return UpdateAndGetPlayerRequest.deserialize(bytes);
        }
    }
    export class UpdateAndGetPlayerReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player?: dependency_4.player.Player;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player" in data && data.player != undefined) {
                    this.player = data.player;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get player() {
            return pb_1.Message.getWrapperField(this, dependency_4.player.Player, 1) as dependency_4.player.Player;
        }
        set player(value: dependency_4.player.Player) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_player() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            player?: ReturnType<typeof dependency_4.player.Player.prototype.toObject>;
            token?: string;
        }): UpdateAndGetPlayerReply {
            const message = new UpdateAndGetPlayerReply({});
            if (data.player != null) {
                message.player = dependency_4.player.Player.fromObject(data.player);
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                player?: ReturnType<typeof dependency_4.player.Player.prototype.toObject>;
                token?: string;
            } = {};
            if (this.player != null) {
                data.player = this.player.toObject();
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_player)
                writer.writeMessage(1, this.player, () => this.player.serialize(writer));
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAndGetPlayerReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAndGetPlayerReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.player, () => message.player = dependency_4.player.Player.deserialize(reader));
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateAndGetPlayerReply {
            return UpdateAndGetPlayerReply.deserialize(bytes);
        }
    }
    export class ListNodesReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nodes?: dependency_6.node.Node[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nodes" in data && data.nodes != undefined) {
                    this.nodes = data.nodes;
                }
            }
        }
        get nodes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_6.node.Node, 1) as dependency_6.node.Node[];
        }
        set nodes(value: dependency_6.node.Node[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            nodes?: ReturnType<typeof dependency_6.node.Node.prototype.toObject>[];
        }): ListNodesReply {
            const message = new ListNodesReply({});
            if (data.nodes != null) {
                message.nodes = data.nodes.map(item => dependency_6.node.Node.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                nodes?: ReturnType<typeof dependency_6.node.Node.prototype.toObject>[];
            } = {};
            if (this.nodes != null) {
                data.nodes = this.nodes.map((item: dependency_6.node.Node) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nodes.length)
                writer.writeRepeatedMessage(1, this.nodes, (item: dependency_6.node.Node) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListNodesReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListNodesReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.nodes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_6.node.Node.deserialize(reader), dependency_6.node.Node));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListNodesReply {
            return ListNodesReply.deserialize(bytes);
        }
    }
    export class ListGamesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            keyword?: dependency_1.google.protobuf.StringValue;
            status?: GameStatusFilter;
            is_private?: dependency_1.google.protobuf.BoolValue;
            is_live?: dependency_1.google.protobuf.BoolValue;
            take?: dependency_1.google.protobuf.Int64Value;
            since_id?: dependency_1.google.protobuf.Int32Value;
            player_id?: dependency_1.google.protobuf.Int32Value;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("keyword" in data && data.keyword != undefined) {
                    this.keyword = data.keyword;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("is_private" in data && data.is_private != undefined) {
                    this.is_private = data.is_private;
                }
                if ("is_live" in data && data.is_live != undefined) {
                    this.is_live = data.is_live;
                }
                if ("take" in data && data.take != undefined) {
                    this.take = data.take;
                }
                if ("since_id" in data && data.since_id != undefined) {
                    this.since_id = data.since_id;
                }
                if ("player_id" in data && data.player_id != undefined) {
                    this.player_id = data.player_id;
                }
            }
        }
        get keyword() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.StringValue, 1) as dependency_1.google.protobuf.StringValue;
        }
        set keyword(value: dependency_1.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_keyword() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, GameStatusFilter.GameStatusFilterAll) as GameStatusFilter;
        }
        set status(value: GameStatusFilter) {
            pb_1.Message.setField(this, 2, value);
        }
        get is_private() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.BoolValue, 3) as dependency_1.google.protobuf.BoolValue;
        }
        set is_private(value: dependency_1.google.protobuf.BoolValue) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_is_private() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get is_live() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.BoolValue, 4) as dependency_1.google.protobuf.BoolValue;
        }
        set is_live(value: dependency_1.google.protobuf.BoolValue) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_is_live() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get take() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int64Value, 5) as dependency_1.google.protobuf.Int64Value;
        }
        set take(value: dependency_1.google.protobuf.Int64Value) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_take() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get since_id() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 6) as dependency_1.google.protobuf.Int32Value;
        }
        set since_id(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_since_id() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get player_id() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 7) as dependency_1.google.protobuf.Int32Value;
        }
        set player_id(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_player_id() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            keyword?: ReturnType<typeof dependency_1.google.protobuf.StringValue.prototype.toObject>;
            status?: GameStatusFilter;
            is_private?: ReturnType<typeof dependency_1.google.protobuf.BoolValue.prototype.toObject>;
            is_live?: ReturnType<typeof dependency_1.google.protobuf.BoolValue.prototype.toObject>;
            take?: ReturnType<typeof dependency_1.google.protobuf.Int64Value.prototype.toObject>;
            since_id?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            player_id?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
        }): ListGamesRequest {
            const message = new ListGamesRequest({});
            if (data.keyword != null) {
                message.keyword = dependency_1.google.protobuf.StringValue.fromObject(data.keyword);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.is_private != null) {
                message.is_private = dependency_1.google.protobuf.BoolValue.fromObject(data.is_private);
            }
            if (data.is_live != null) {
                message.is_live = dependency_1.google.protobuf.BoolValue.fromObject(data.is_live);
            }
            if (data.take != null) {
                message.take = dependency_1.google.protobuf.Int64Value.fromObject(data.take);
            }
            if (data.since_id != null) {
                message.since_id = dependency_1.google.protobuf.Int32Value.fromObject(data.since_id);
            }
            if (data.player_id != null) {
                message.player_id = dependency_1.google.protobuf.Int32Value.fromObject(data.player_id);
            }
            return message;
        }
        toObject() {
            const data: {
                keyword?: ReturnType<typeof dependency_1.google.protobuf.StringValue.prototype.toObject>;
                status?: GameStatusFilter;
                is_private?: ReturnType<typeof dependency_1.google.protobuf.BoolValue.prototype.toObject>;
                is_live?: ReturnType<typeof dependency_1.google.protobuf.BoolValue.prototype.toObject>;
                take?: ReturnType<typeof dependency_1.google.protobuf.Int64Value.prototype.toObject>;
                since_id?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                player_id?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            } = {};
            if (this.keyword != null) {
                data.keyword = this.keyword.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.is_private != null) {
                data.is_private = this.is_private.toObject();
            }
            if (this.is_live != null) {
                data.is_live = this.is_live.toObject();
            }
            if (this.take != null) {
                data.take = this.take.toObject();
            }
            if (this.since_id != null) {
                data.since_id = this.since_id.toObject();
            }
            if (this.player_id != null) {
                data.player_id = this.player_id.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_keyword)
                writer.writeMessage(1, this.keyword, () => this.keyword.serialize(writer));
            if (this.status != GameStatusFilter.GameStatusFilterAll)
                writer.writeEnum(2, this.status);
            if (this.has_is_private)
                writer.writeMessage(3, this.is_private, () => this.is_private.serialize(writer));
            if (this.has_is_live)
                writer.writeMessage(4, this.is_live, () => this.is_live.serialize(writer));
            if (this.has_take)
                writer.writeMessage(5, this.take, () => this.take.serialize(writer));
            if (this.has_since_id)
                writer.writeMessage(6, this.since_id, () => this.since_id.serialize(writer));
            if (this.has_player_id)
                writer.writeMessage(7, this.player_id, () => this.player_id.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListGamesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListGamesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.keyword, () => message.keyword = dependency_1.google.protobuf.StringValue.deserialize(reader));
                        break;
                    case 2:
                        message.status = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.is_private, () => message.is_private = dependency_1.google.protobuf.BoolValue.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.is_live, () => message.is_live = dependency_1.google.protobuf.BoolValue.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.take, () => message.take = dependency_1.google.protobuf.Int64Value.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.since_id, () => message.since_id = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.player_id, () => message.player_id = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListGamesRequest {
            return ListGamesRequest.deserialize(bytes);
        }
    }
    export class ListGamesReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            games?: dependency_5.game.GameEntry[];
            has_more?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("games" in data && data.games != undefined) {
                    this.games = data.games;
                }
                if ("has_more" in data && data.has_more != undefined) {
                    this.has_more = data.has_more;
                }
            }
        }
        get games() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.game.GameEntry, 1) as dependency_5.game.GameEntry[];
        }
        set games(value: dependency_5.game.GameEntry[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get has_more() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set has_more(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            games?: ReturnType<typeof dependency_5.game.GameEntry.prototype.toObject>[];
            has_more?: boolean;
        }): ListGamesReply {
            const message = new ListGamesReply({});
            if (data.games != null) {
                message.games = data.games.map(item => dependency_5.game.GameEntry.fromObject(item));
            }
            if (data.has_more != null) {
                message.has_more = data.has_more;
            }
            return message;
        }
        toObject() {
            const data: {
                games?: ReturnType<typeof dependency_5.game.GameEntry.prototype.toObject>[];
                has_more?: boolean;
            } = {};
            if (this.games != null) {
                data.games = this.games.map((item: dependency_5.game.GameEntry) => item.toObject());
            }
            if (this.has_more != null) {
                data.has_more = this.has_more;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.games.length)
                writer.writeRepeatedMessage(1, this.games, (item: dependency_5.game.GameEntry) => item.serialize(writer));
            if (this.has_more != false)
                writer.writeBool(2, this.has_more);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListGamesReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListGamesReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.games, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.game.GameEntry.deserialize(reader), dependency_5.game.GameEntry));
                        break;
                    case 2:
                        message.has_more = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListGamesReply {
            return ListGamesReply.deserialize(bytes);
        }
    }
    export class GetGameRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            game_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("game_id" in data && data.game_id != undefined) {
                    this.game_id = data.game_id;
                }
            }
        }
        get game_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set game_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            game_id?: number;
        }): GetGameRequest {
            const message = new GetGameRequest({});
            if (data.game_id != null) {
                message.game_id = data.game_id;
            }
            return message;
        }
        toObject() {
            const data: {
                game_id?: number;
            } = {};
            if (this.game_id != null) {
                data.game_id = this.game_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.game_id != 0)
                writer.writeInt32(1, this.game_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetGameRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetGameRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.game_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetGameRequest {
            return GetGameRequest.deserialize(bytes);
        }
    }
    export class GetGameReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            game?: dependency_5.game.Game;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("game" in data && data.game != undefined) {
                    this.game = data.game;
                }
            }
        }
        get game() {
            return pb_1.Message.getWrapperField(this, dependency_5.game.Game, 1) as dependency_5.game.Game;
        }
        set game(value: dependency_5.game.Game) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_game() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            game?: ReturnType<typeof dependency_5.game.Game.prototype.toObject>;
        }): GetGameReply {
            const message = new GetGameReply({});
            if (data.game != null) {
                message.game = dependency_5.game.Game.fromObject(data.game);
            }
            return message;
        }
        toObject() {
            const data: {
                game?: ReturnType<typeof dependency_5.game.Game.prototype.toObject>;
            } = {};
            if (this.game != null) {
                data.game = this.game.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_game)
                writer.writeMessage(1, this.game, () => this.game.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetGameReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetGameReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.game, () => message.game = dependency_5.game.Game.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetGameReply {
            return GetGameReply.deserialize(bytes);
        }
    }
    export class CreateGameRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player_id?: number;
            name?: string;
            map?: dependency_5.game.Map;
            is_private?: boolean;
            is_live?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player_id" in data && data.player_id != undefined) {
                    this.player_id = data.player_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("map" in data && data.map != undefined) {
                    this.map = data.map;
                }
                if ("is_private" in data && data.is_private != undefined) {
                    this.is_private = data.is_private;
                }
                if ("is_live" in data && data.is_live != undefined) {
                    this.is_live = data.is_live;
                }
            }
        }
        get player_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set player_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get map() {
            return pb_1.Message.getWrapperField(this, dependency_5.game.Map, 3) as dependency_5.game.Map;
        }
        set map(value: dependency_5.game.Map) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_map() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get is_private() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set is_private(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get is_live() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set is_live(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            player_id?: number;
            name?: string;
            map?: ReturnType<typeof dependency_5.game.Map.prototype.toObject>;
            is_private?: boolean;
            is_live?: boolean;
        }): CreateGameRequest {
            const message = new CreateGameRequest({});
            if (data.player_id != null) {
                message.player_id = data.player_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.map != null) {
                message.map = dependency_5.game.Map.fromObject(data.map);
            }
            if (data.is_private != null) {
                message.is_private = data.is_private;
            }
            if (data.is_live != null) {
                message.is_live = data.is_live;
            }
            return message;
        }
        toObject() {
            const data: {
                player_id?: number;
                name?: string;
                map?: ReturnType<typeof dependency_5.game.Map.prototype.toObject>;
                is_private?: boolean;
                is_live?: boolean;
            } = {};
            if (this.player_id != null) {
                data.player_id = this.player_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.map != null) {
                data.map = this.map.toObject();
            }
            if (this.is_private != null) {
                data.is_private = this.is_private;
            }
            if (this.is_live != null) {
                data.is_live = this.is_live;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.player_id != 0)
                writer.writeInt32(1, this.player_id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.has_map)
                writer.writeMessage(3, this.map, () => this.map.serialize(writer));
            if (this.is_private != false)
                writer.writeBool(4, this.is_private);
            if (this.is_live != false)
                writer.writeBool(5, this.is_live);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateGameRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateGameRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.player_id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.map, () => message.map = dependency_5.game.Map.deserialize(reader));
                        break;
                    case 4:
                        message.is_private = reader.readBool();
                        break;
                    case 5:
                        message.is_live = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateGameRequest {
            return CreateGameRequest.deserialize(bytes);
        }
    }
    export class CreateGameReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            game?: dependency_5.game.Game;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("game" in data && data.game != undefined) {
                    this.game = data.game;
                }
            }
        }
        get game() {
            return pb_1.Message.getWrapperField(this, dependency_5.game.Game, 1) as dependency_5.game.Game;
        }
        set game(value: dependency_5.game.Game) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_game() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            game?: ReturnType<typeof dependency_5.game.Game.prototype.toObject>;
        }): CreateGameReply {
            const message = new CreateGameReply({});
            if (data.game != null) {
                message.game = dependency_5.game.Game.fromObject(data.game);
            }
            return message;
        }
        toObject() {
            const data: {
                game?: ReturnType<typeof dependency_5.game.Game.prototype.toObject>;
            } = {};
            if (this.game != null) {
                data.game = this.game.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_game)
                writer.writeMessage(1, this.game, () => this.game.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateGameReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateGameReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.game, () => message.game = dependency_5.game.Game.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateGameReply {
            return CreateGameReply.deserialize(bytes);
        }
    }
    export class CreateGameAsBotRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            map?: dependency_5.game.Map;
            is_private?: boolean;
            is_live?: boolean;
            node_id?: number;
            slots?: CreateGameSlot[];
            mask_player_names?: boolean;
            enable_ping_equalizer?: boolean;
            flo_tv_delay_override_secs?: dependency_1.google.protobuf.Int32Value;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("map" in data && data.map != undefined) {
                    this.map = data.map;
                }
                if ("is_private" in data && data.is_private != undefined) {
                    this.is_private = data.is_private;
                }
                if ("is_live" in data && data.is_live != undefined) {
                    this.is_live = data.is_live;
                }
                if ("node_id" in data && data.node_id != undefined) {
                    this.node_id = data.node_id;
                }
                if ("slots" in data && data.slots != undefined) {
                    this.slots = data.slots;
                }
                if ("mask_player_names" in data && data.mask_player_names != undefined) {
                    this.mask_player_names = data.mask_player_names;
                }
                if ("enable_ping_equalizer" in data && data.enable_ping_equalizer != undefined) {
                    this.enable_ping_equalizer = data.enable_ping_equalizer;
                }
                if ("flo_tv_delay_override_secs" in data && data.flo_tv_delay_override_secs != undefined) {
                    this.flo_tv_delay_override_secs = data.flo_tv_delay_override_secs;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get map() {
            return pb_1.Message.getWrapperField(this, dependency_5.game.Map, 3) as dependency_5.game.Map;
        }
        set map(value: dependency_5.game.Map) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_map() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get is_private() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set is_private(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get is_live() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set is_live(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get node_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set node_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get slots() {
            return pb_1.Message.getRepeatedWrapperField(this, CreateGameSlot, 7) as CreateGameSlot[];
        }
        set slots(value: CreateGameSlot[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get mask_player_names() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set mask_player_names(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get enable_ping_equalizer() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set enable_ping_equalizer(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get flo_tv_delay_override_secs() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 10) as dependency_1.google.protobuf.Int32Value;
        }
        set flo_tv_delay_override_secs(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_flo_tv_delay_override_secs() {
            return pb_1.Message.getField(this, 10) != null;
        }
        static fromObject(data: {
            name?: string;
            map?: ReturnType<typeof dependency_5.game.Map.prototype.toObject>;
            is_private?: boolean;
            is_live?: boolean;
            node_id?: number;
            slots?: ReturnType<typeof CreateGameSlot.prototype.toObject>[];
            mask_player_names?: boolean;
            enable_ping_equalizer?: boolean;
            flo_tv_delay_override_secs?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
        }): CreateGameAsBotRequest {
            const message = new CreateGameAsBotRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.map != null) {
                message.map = dependency_5.game.Map.fromObject(data.map);
            }
            if (data.is_private != null) {
                message.is_private = data.is_private;
            }
            if (data.is_live != null) {
                message.is_live = data.is_live;
            }
            if (data.node_id != null) {
                message.node_id = data.node_id;
            }
            if (data.slots != null) {
                message.slots = data.slots.map(item => CreateGameSlot.fromObject(item));
            }
            if (data.mask_player_names != null) {
                message.mask_player_names = data.mask_player_names;
            }
            if (data.enable_ping_equalizer != null) {
                message.enable_ping_equalizer = data.enable_ping_equalizer;
            }
            if (data.flo_tv_delay_override_secs != null) {
                message.flo_tv_delay_override_secs = dependency_1.google.protobuf.Int32Value.fromObject(data.flo_tv_delay_override_secs);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                map?: ReturnType<typeof dependency_5.game.Map.prototype.toObject>;
                is_private?: boolean;
                is_live?: boolean;
                node_id?: number;
                slots?: ReturnType<typeof CreateGameSlot.prototype.toObject>[];
                mask_player_names?: boolean;
                enable_ping_equalizer?: boolean;
                flo_tv_delay_override_secs?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.map != null) {
                data.map = this.map.toObject();
            }
            if (this.is_private != null) {
                data.is_private = this.is_private;
            }
            if (this.is_live != null) {
                data.is_live = this.is_live;
            }
            if (this.node_id != null) {
                data.node_id = this.node_id;
            }
            if (this.slots != null) {
                data.slots = this.slots.map((item: CreateGameSlot) => item.toObject());
            }
            if (this.mask_player_names != null) {
                data.mask_player_names = this.mask_player_names;
            }
            if (this.enable_ping_equalizer != null) {
                data.enable_ping_equalizer = this.enable_ping_equalizer;
            }
            if (this.flo_tv_delay_override_secs != null) {
                data.flo_tv_delay_override_secs = this.flo_tv_delay_override_secs.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.has_map)
                writer.writeMessage(3, this.map, () => this.map.serialize(writer));
            if (this.is_private != false)
                writer.writeBool(4, this.is_private);
            if (this.is_live != false)
                writer.writeBool(5, this.is_live);
            if (this.node_id != 0)
                writer.writeInt32(6, this.node_id);
            if (this.slots.length)
                writer.writeRepeatedMessage(7, this.slots, (item: CreateGameSlot) => item.serialize(writer));
            if (this.mask_player_names != false)
                writer.writeBool(8, this.mask_player_names);
            if (this.enable_ping_equalizer != false)
                writer.writeBool(9, this.enable_ping_equalizer);
            if (this.has_flo_tv_delay_override_secs)
                writer.writeMessage(10, this.flo_tv_delay_override_secs, () => this.flo_tv_delay_override_secs.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateGameAsBotRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateGameAsBotRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.map, () => message.map = dependency_5.game.Map.deserialize(reader));
                        break;
                    case 4:
                        message.is_private = reader.readBool();
                        break;
                    case 5:
                        message.is_live = reader.readBool();
                        break;
                    case 6:
                        message.node_id = reader.readInt32();
                        break;
                    case 7:
                        reader.readMessage(message.slots, () => pb_1.Message.addToRepeatedWrapperField(message, 7, CreateGameSlot.deserialize(reader), CreateGameSlot));
                        break;
                    case 8:
                        message.mask_player_names = reader.readBool();
                        break;
                    case 9:
                        message.enable_ping_equalizer = reader.readBool();
                        break;
                    case 10:
                        reader.readMessage(message.flo_tv_delay_override_secs, () => message.flo_tv_delay_override_secs = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateGameAsBotRequest {
            return CreateGameAsBotRequest.deserialize(bytes);
        }
    }
    export class CreateGameSlot extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player_id?: dependency_1.google.protobuf.Int32Value;
            settings?: dependency_5.game.SlotSettings;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player_id" in data && data.player_id != undefined) {
                    this.player_id = data.player_id;
                }
                if ("settings" in data && data.settings != undefined) {
                    this.settings = data.settings;
                }
            }
        }
        get player_id() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 1) as dependency_1.google.protobuf.Int32Value;
        }
        set player_id(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_player_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get settings() {
            return pb_1.Message.getWrapperField(this, dependency_5.game.SlotSettings, 2) as dependency_5.game.SlotSettings;
        }
        set settings(value: dependency_5.game.SlotSettings) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_settings() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            player_id?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            settings?: ReturnType<typeof dependency_5.game.SlotSettings.prototype.toObject>;
        }): CreateGameSlot {
            const message = new CreateGameSlot({});
            if (data.player_id != null) {
                message.player_id = dependency_1.google.protobuf.Int32Value.fromObject(data.player_id);
            }
            if (data.settings != null) {
                message.settings = dependency_5.game.SlotSettings.fromObject(data.settings);
            }
            return message;
        }
        toObject() {
            const data: {
                player_id?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
                settings?: ReturnType<typeof dependency_5.game.SlotSettings.prototype.toObject>;
            } = {};
            if (this.player_id != null) {
                data.player_id = this.player_id.toObject();
            }
            if (this.settings != null) {
                data.settings = this.settings.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_player_id)
                writer.writeMessage(1, this.player_id, () => this.player_id.serialize(writer));
            if (this.has_settings)
                writer.writeMessage(2, this.settings, () => this.settings.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateGameSlot {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateGameSlot();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.player_id, () => message.player_id = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.settings, () => message.settings = dependency_5.game.SlotSettings.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateGameSlot {
            return CreateGameSlot.deserialize(bytes);
        }
    }
    export class CreateGameAsBotReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            game?: dependency_5.game.Game;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("game" in data && data.game != undefined) {
                    this.game = data.game;
                }
            }
        }
        get game() {
            return pb_1.Message.getWrapperField(this, dependency_5.game.Game, 1) as dependency_5.game.Game;
        }
        set game(value: dependency_5.game.Game) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_game() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            game?: ReturnType<typeof dependency_5.game.Game.prototype.toObject>;
        }): CreateGameAsBotReply {
            const message = new CreateGameAsBotReply({});
            if (data.game != null) {
                message.game = dependency_5.game.Game.fromObject(data.game);
            }
            return message;
        }
        toObject() {
            const data: {
                game?: ReturnType<typeof dependency_5.game.Game.prototype.toObject>;
            } = {};
            if (this.game != null) {
                data.game = this.game.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_game)
                writer.writeMessage(1, this.game, () => this.game.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateGameAsBotReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateGameAsBotReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.game, () => message.game = dependency_5.game.Game.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateGameAsBotReply {
            return CreateGameAsBotReply.deserialize(bytes);
        }
    }
    export class StartGameAsBotRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            game_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("game_id" in data && data.game_id != undefined) {
                    this.game_id = data.game_id;
                }
            }
        }
        get game_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set game_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            game_id?: number;
        }): StartGameAsBotRequest {
            const message = new StartGameAsBotRequest({});
            if (data.game_id != null) {
                message.game_id = data.game_id;
            }
            return message;
        }
        toObject() {
            const data: {
                game_id?: number;
            } = {};
            if (this.game_id != null) {
                data.game_id = this.game_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.game_id != 0)
                writer.writeInt32(1, this.game_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartGameAsBotRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartGameAsBotRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.game_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StartGameAsBotRequest {
            return StartGameAsBotRequest.deserialize(bytes);
        }
    }
    export class StartGameAsBotReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            succeed?: boolean;
            error_message?: string;
            player_ack_map?: Map<number, StartGamePlayerAck>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("succeed" in data && data.succeed != undefined) {
                    this.succeed = data.succeed;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
                if ("player_ack_map" in data && data.player_ack_map != undefined) {
                    this.player_ack_map = data.player_ack_map;
                }
            }
            if (!this.player_ack_map)
                this.player_ack_map = new Map();
        }
        get succeed() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set succeed(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get player_ack_map() {
            return pb_1.Message.getField(this, 3) as any as Map<number, StartGamePlayerAck>;
        }
        set player_ack_map(value: Map<number, StartGamePlayerAck>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        static fromObject(data: {
            succeed?: boolean;
            error_message?: string;
            player_ack_map?: {
                [key: number]: ReturnType<typeof StartGamePlayerAck.prototype.toObject>;
            };
        }): StartGameAsBotReply {
            const message = new StartGameAsBotReply({});
            if (data.succeed != null) {
                message.succeed = data.succeed;
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            if (typeof data.player_ack_map == "object") {
                message.player_ack_map = new Map(Object.entries(data.player_ack_map).map(([key, value]) => [Number(key), StartGamePlayerAck.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                succeed?: boolean;
                error_message?: string;
                player_ack_map?: {
                    [key: number]: ReturnType<typeof StartGamePlayerAck.prototype.toObject>;
                };
            } = {};
            if (this.succeed != null) {
                data.succeed = this.succeed;
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            if (this.player_ack_map.size > 0) {
                data.player_ack_map = Object.fromEntries(Array.from(this.player_ack_map).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.succeed != false)
                writer.writeBool(1, this.succeed);
            if (this.error_message.length)
                writer.writeString(2, this.error_message);
            for (const [key, value] of this.player_ack_map) {
                writer.writeMessage(3, this.player_ack_map, () => {
                    writer.writeInt32(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartGameAsBotReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartGameAsBotReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.succeed = reader.readBool();
                        break;
                    case 2:
                        message.error_message = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.player_ack_map as any, reader, reader.readInt32, () => {
                            let value;
                            reader.readMessage(message, () => value = StartGamePlayerAck.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StartGameAsBotReply {
            return StartGameAsBotReply.deserialize(bytes);
        }
    }
    export class StartGameCountdownAsBotRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            game_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("game_id" in data && data.game_id != undefined) {
                    this.game_id = data.game_id;
                }
            }
        }
        get game_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set game_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            game_id?: number;
        }): StartGameCountdownAsBotRequest {
            const message = new StartGameCountdownAsBotRequest({});
            if (data.game_id != null) {
                message.game_id = data.game_id;
            }
            return message;
        }
        toObject() {
            const data: {
                game_id?: number;
            } = {};
            if (this.game_id != null) {
                data.game_id = this.game_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.game_id != 0)
                writer.writeInt32(1, this.game_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartGameCountdownAsBotRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartGameCountdownAsBotRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.game_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StartGameCountdownAsBotRequest {
            return StartGameCountdownAsBotRequest.deserialize(bytes);
        }
    }
    export class StartGamePlayerAck extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            war3_version?: string;
            map_sha1?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("war3_version" in data && data.war3_version != undefined) {
                    this.war3_version = data.war3_version;
                }
                if ("map_sha1" in data && data.map_sha1 != undefined) {
                    this.map_sha1 = data.map_sha1;
                }
            }
        }
        get war3_version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set war3_version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get map_sha1() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array()) as Uint8Array;
        }
        set map_sha1(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            war3_version?: string;
            map_sha1?: Uint8Array;
        }): StartGamePlayerAck {
            const message = new StartGamePlayerAck({});
            if (data.war3_version != null) {
                message.war3_version = data.war3_version;
            }
            if (data.map_sha1 != null) {
                message.map_sha1 = data.map_sha1;
            }
            return message;
        }
        toObject() {
            const data: {
                war3_version?: string;
                map_sha1?: Uint8Array;
            } = {};
            if (this.war3_version != null) {
                data.war3_version = this.war3_version;
            }
            if (this.map_sha1 != null) {
                data.map_sha1 = this.map_sha1;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.war3_version.length)
                writer.writeString(2, this.war3_version);
            if (this.map_sha1.length)
                writer.writeBytes(3, this.map_sha1);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartGamePlayerAck {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartGamePlayerAck();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.war3_version = reader.readString();
                        break;
                    case 3:
                        message.map_sha1 = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StartGamePlayerAck {
            return StartGamePlayerAck.deserialize(bytes);
        }
    }
    export class JoinGameRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            game_id?: number;
            player_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("game_id" in data && data.game_id != undefined) {
                    this.game_id = data.game_id;
                }
                if ("player_id" in data && data.player_id != undefined) {
                    this.player_id = data.player_id;
                }
            }
        }
        get game_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set game_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get player_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set player_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            game_id?: number;
            player_id?: number;
        }): JoinGameRequest {
            const message = new JoinGameRequest({});
            if (data.game_id != null) {
                message.game_id = data.game_id;
            }
            if (data.player_id != null) {
                message.player_id = data.player_id;
            }
            return message;
        }
        toObject() {
            const data: {
                game_id?: number;
                player_id?: number;
            } = {};
            if (this.game_id != null) {
                data.game_id = this.game_id;
            }
            if (this.player_id != null) {
                data.player_id = this.player_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.game_id != 0)
                writer.writeInt32(1, this.game_id);
            if (this.player_id != 0)
                writer.writeInt32(2, this.player_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinGameRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinGameRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.game_id = reader.readInt32();
                        break;
                    case 2:
                        message.player_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JoinGameRequest {
            return JoinGameRequest.deserialize(bytes);
        }
    }
    export class JoinGameReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            game?: dependency_5.game.Game;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("game" in data && data.game != undefined) {
                    this.game = data.game;
                }
            }
        }
        get game() {
            return pb_1.Message.getWrapperField(this, dependency_5.game.Game, 1) as dependency_5.game.Game;
        }
        set game(value: dependency_5.game.Game) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_game() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            game?: ReturnType<typeof dependency_5.game.Game.prototype.toObject>;
        }): JoinGameReply {
            const message = new JoinGameReply({});
            if (data.game != null) {
                message.game = dependency_5.game.Game.fromObject(data.game);
            }
            return message;
        }
        toObject() {
            const data: {
                game?: ReturnType<typeof dependency_5.game.Game.prototype.toObject>;
            } = {};
            if (this.game != null) {
                data.game = this.game.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_game)
                writer.writeMessage(1, this.game, () => this.game.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinGameReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinGameReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.game, () => message.game = dependency_5.game.Game.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JoinGameReply {
            return JoinGameReply.deserialize(bytes);
        }
    }
    export class CreateJoinGameTokenRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            game_id?: number;
            player_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("game_id" in data && data.game_id != undefined) {
                    this.game_id = data.game_id;
                }
                if ("player_id" in data && data.player_id != undefined) {
                    this.player_id = data.player_id;
                }
            }
        }
        get game_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set game_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get player_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set player_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            game_id?: number;
            player_id?: number;
        }): CreateJoinGameTokenRequest {
            const message = new CreateJoinGameTokenRequest({});
            if (data.game_id != null) {
                message.game_id = data.game_id;
            }
            if (data.player_id != null) {
                message.player_id = data.player_id;
            }
            return message;
        }
        toObject() {
            const data: {
                game_id?: number;
                player_id?: number;
            } = {};
            if (this.game_id != null) {
                data.game_id = this.game_id;
            }
            if (this.player_id != null) {
                data.player_id = this.player_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.game_id != 0)
                writer.writeInt32(1, this.game_id);
            if (this.player_id != 0)
                writer.writeInt32(2, this.player_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateJoinGameTokenRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateJoinGameTokenRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.game_id = reader.readInt32();
                        break;
                    case 2:
                        message.player_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateJoinGameTokenRequest {
            return CreateJoinGameTokenRequest.deserialize(bytes);
        }
    }
    export class CreateJoinGameTokenReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): CreateJoinGameTokenReply {
            const message = new CreateJoinGameTokenReply({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateJoinGameTokenReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateJoinGameTokenReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateJoinGameTokenReply {
            return CreateJoinGameTokenReply.deserialize(bytes);
        }
    }
    export class JoinGameByTokenRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            player_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("player_id" in data && data.player_id != undefined) {
                    this.player_id = data.player_id;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get player_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set player_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            player_id?: number;
        }): JoinGameByTokenRequest {
            const message = new JoinGameByTokenRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.player_id != null) {
                message.player_id = data.player_id;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                player_id?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.player_id != null) {
                data.player_id = this.player_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.player_id != 0)
                writer.writeInt32(2, this.player_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinGameByTokenRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinGameByTokenRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.player_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JoinGameByTokenRequest {
            return JoinGameByTokenRequest.deserialize(bytes);
        }
    }
    export class LeaveGameRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            game_id?: number;
            player_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("game_id" in data && data.game_id != undefined) {
                    this.game_id = data.game_id;
                }
                if ("player_id" in data && data.player_id != undefined) {
                    this.player_id = data.player_id;
                }
            }
        }
        get game_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set game_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get player_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set player_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            game_id?: number;
            player_id?: number;
        }): LeaveGameRequest {
            const message = new LeaveGameRequest({});
            if (data.game_id != null) {
                message.game_id = data.game_id;
            }
            if (data.player_id != null) {
                message.player_id = data.player_id;
            }
            return message;
        }
        toObject() {
            const data: {
                game_id?: number;
                player_id?: number;
            } = {};
            if (this.game_id != null) {
                data.game_id = this.game_id;
            }
            if (this.player_id != null) {
                data.player_id = this.player_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.game_id != 0)
                writer.writeInt32(1, this.game_id);
            if (this.player_id != 0)
                writer.writeInt32(2, this.player_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaveGameRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaveGameRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.game_id = reader.readInt32();
                        break;
                    case 2:
                        message.player_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LeaveGameRequest {
            return LeaveGameRequest.deserialize(bytes);
        }
    }
    export class SelectGameNodeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            game_id?: number;
            player_id?: number;
            node_id?: dependency_1.google.protobuf.Int32Value;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("game_id" in data && data.game_id != undefined) {
                    this.game_id = data.game_id;
                }
                if ("player_id" in data && data.player_id != undefined) {
                    this.player_id = data.player_id;
                }
                if ("node_id" in data && data.node_id != undefined) {
                    this.node_id = data.node_id;
                }
            }
        }
        get game_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set game_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get player_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set player_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get node_id() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 3) as dependency_1.google.protobuf.Int32Value;
        }
        set node_id(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_node_id() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            game_id?: number;
            player_id?: number;
            node_id?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
        }): SelectGameNodeRequest {
            const message = new SelectGameNodeRequest({});
            if (data.game_id != null) {
                message.game_id = data.game_id;
            }
            if (data.player_id != null) {
                message.player_id = data.player_id;
            }
            if (data.node_id != null) {
                message.node_id = dependency_1.google.protobuf.Int32Value.fromObject(data.node_id);
            }
            return message;
        }
        toObject() {
            const data: {
                game_id?: number;
                player_id?: number;
                node_id?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            } = {};
            if (this.game_id != null) {
                data.game_id = this.game_id;
            }
            if (this.player_id != null) {
                data.player_id = this.player_id;
            }
            if (this.node_id != null) {
                data.node_id = this.node_id.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.game_id != 0)
                writer.writeInt32(1, this.game_id);
            if (this.player_id != 0)
                writer.writeInt32(2, this.player_id);
            if (this.has_node_id)
                writer.writeMessage(3, this.node_id, () => this.node_id.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SelectGameNodeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SelectGameNodeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.game_id = reader.readInt32();
                        break;
                    case 2:
                        message.player_id = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.node_id, () => message.node_id = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SelectGameNodeRequest {
            return SelectGameNodeRequest.deserialize(bytes);
        }
    }
    export class CancelGameRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            game_id?: number;
            player_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("game_id" in data && data.game_id != undefined) {
                    this.game_id = data.game_id;
                }
                if ("player_id" in data && data.player_id != undefined) {
                    this.player_id = data.player_id;
                }
            }
        }
        get game_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set game_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get player_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set player_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            game_id?: number;
            player_id?: number;
        }): CancelGameRequest {
            const message = new CancelGameRequest({});
            if (data.game_id != null) {
                message.game_id = data.game_id;
            }
            if (data.player_id != null) {
                message.player_id = data.player_id;
            }
            return message;
        }
        toObject() {
            const data: {
                game_id?: number;
                player_id?: number;
            } = {};
            if (this.game_id != null) {
                data.game_id = this.game_id;
            }
            if (this.player_id != null) {
                data.player_id = this.player_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.game_id != 0)
                writer.writeInt32(1, this.game_id);
            if (this.player_id != 0)
                writer.writeInt32(2, this.player_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CancelGameRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CancelGameRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.game_id = reader.readInt32();
                        break;
                    case 2:
                        message.player_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CancelGameRequest {
            return CancelGameRequest.deserialize(bytes);
        }
    }
    export class CancelGameAsBotRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            game_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("game_id" in data && data.game_id != undefined) {
                    this.game_id = data.game_id;
                }
            }
        }
        get game_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set game_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            game_id?: number;
        }): CancelGameAsBotRequest {
            const message = new CancelGameAsBotRequest({});
            if (data.game_id != null) {
                message.game_id = data.game_id;
            }
            return message;
        }
        toObject() {
            const data: {
                game_id?: number;
            } = {};
            if (this.game_id != null) {
                data.game_id = this.game_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.game_id != 0)
                writer.writeInt32(1, this.game_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CancelGameAsBotRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CancelGameAsBotRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.game_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CancelGameAsBotRequest {
            return CancelGameAsBotRequest.deserialize(bytes);
        }
    }
    export class ImportMapChecksumsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: dependency_5.game.MapChecksumImportItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.game.MapChecksumImportItem, 1) as dependency_5.game.MapChecksumImportItem[];
        }
        set items(value: dependency_5.game.MapChecksumImportItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof dependency_5.game.MapChecksumImportItem.prototype.toObject>[];
        }): ImportMapChecksumsRequest {
            const message = new ImportMapChecksumsRequest({});
            if (data.items != null) {
                message.items = data.items.map(item => dependency_5.game.MapChecksumImportItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof dependency_5.game.MapChecksumImportItem.prototype.toObject>[];
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: dependency_5.game.MapChecksumImportItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: dependency_5.game.MapChecksumImportItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ImportMapChecksumsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ImportMapChecksumsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.game.MapChecksumImportItem.deserialize(reader), dependency_5.game.MapChecksumImportItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ImportMapChecksumsRequest {
            return ImportMapChecksumsRequest.deserialize(bytes);
        }
    }
    export class ImportMapChecksumsReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            updated?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("updated" in data && data.updated != undefined) {
                    this.updated = data.updated;
                }
            }
        }
        get updated() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set updated(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            updated?: number;
        }): ImportMapChecksumsReply {
            const message = new ImportMapChecksumsReply({});
            if (data.updated != null) {
                message.updated = data.updated;
            }
            return message;
        }
        toObject() {
            const data: {
                updated?: number;
            } = {};
            if (this.updated != null) {
                data.updated = this.updated;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.updated != 0)
                writer.writeUint32(1, this.updated);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ImportMapChecksumsReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ImportMapChecksumsReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.updated = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ImportMapChecksumsReply {
            return ImportMapChecksumsReply.deserialize(bytes);
        }
    }
    export class SearchMapChecksumRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sha1?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sha1" in data && data.sha1 != undefined) {
                    this.sha1 = data.sha1;
                }
            }
        }
        get sha1() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sha1(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            sha1?: string;
        }): SearchMapChecksumRequest {
            const message = new SearchMapChecksumRequest({});
            if (data.sha1 != null) {
                message.sha1 = data.sha1;
            }
            return message;
        }
        toObject() {
            const data: {
                sha1?: string;
            } = {};
            if (this.sha1 != null) {
                data.sha1 = this.sha1;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sha1.length)
                writer.writeString(1, this.sha1);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchMapChecksumRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchMapChecksumRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sha1 = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchMapChecksumRequest {
            return SearchMapChecksumRequest.deserialize(bytes);
        }
    }
    export class SearchMapChecksumReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            checksum?: dependency_1.google.protobuf.UInt32Value;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("checksum" in data && data.checksum != undefined) {
                    this.checksum = data.checksum;
                }
            }
        }
        get checksum() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 1) as dependency_1.google.protobuf.UInt32Value;
        }
        set checksum(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_checksum() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            checksum?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
        }): SearchMapChecksumReply {
            const message = new SearchMapChecksumReply({});
            if (data.checksum != null) {
                message.checksum = dependency_1.google.protobuf.UInt32Value.fromObject(data.checksum);
            }
            return message;
        }
        toObject() {
            const data: {
                checksum?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            } = {};
            if (this.checksum != null) {
                data.checksum = this.checksum.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_checksum)
                writer.writeMessage(1, this.checksum, () => this.checksum.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchMapChecksumReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchMapChecksumReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.checksum, () => message.checksum = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchMapChecksumReply {
            return SearchMapChecksumReply.deserialize(bytes);
        }
    }
    export class ListPlayerBansRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            query?: dependency_1.google.protobuf.StringValue;
            next_id?: dependency_1.google.protobuf.Int32Value;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
                if ("next_id" in data && data.next_id != undefined) {
                    this.next_id = data.next_id;
                }
            }
        }
        get query() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.StringValue, 1) as dependency_1.google.protobuf.StringValue;
        }
        set query(value: dependency_1.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_query() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get next_id() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 2) as dependency_1.google.protobuf.Int32Value;
        }
        set next_id(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_next_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            query?: ReturnType<typeof dependency_1.google.protobuf.StringValue.prototype.toObject>;
            next_id?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
        }): ListPlayerBansRequest {
            const message = new ListPlayerBansRequest({});
            if (data.query != null) {
                message.query = dependency_1.google.protobuf.StringValue.fromObject(data.query);
            }
            if (data.next_id != null) {
                message.next_id = dependency_1.google.protobuf.Int32Value.fromObject(data.next_id);
            }
            return message;
        }
        toObject() {
            const data: {
                query?: ReturnType<typeof dependency_1.google.protobuf.StringValue.prototype.toObject>;
                next_id?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            } = {};
            if (this.query != null) {
                data.query = this.query.toObject();
            }
            if (this.next_id != null) {
                data.next_id = this.next_id.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_query)
                writer.writeMessage(1, this.query, () => this.query.serialize(writer));
            if (this.has_next_id)
                writer.writeMessage(2, this.next_id, () => this.next_id.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListPlayerBansRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListPlayerBansRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.query, () => message.query = dependency_1.google.protobuf.StringValue.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.next_id, () => message.next_id = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListPlayerBansRequest {
            return ListPlayerBansRequest.deserialize(bytes);
        }
    }
    export class ListPlayerBansReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player_bans?: dependency_4.player.PlayerBan[];
            next_id?: dependency_1.google.protobuf.Int32Value;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player_bans" in data && data.player_bans != undefined) {
                    this.player_bans = data.player_bans;
                }
                if ("next_id" in data && data.next_id != undefined) {
                    this.next_id = data.next_id;
                }
            }
        }
        get player_bans() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.player.PlayerBan, 1) as dependency_4.player.PlayerBan[];
        }
        set player_bans(value: dependency_4.player.PlayerBan[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_id() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Int32Value, 2) as dependency_1.google.protobuf.Int32Value;
        }
        set next_id(value: dependency_1.google.protobuf.Int32Value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_next_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            player_bans?: ReturnType<typeof dependency_4.player.PlayerBan.prototype.toObject>[];
            next_id?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
        }): ListPlayerBansReply {
            const message = new ListPlayerBansReply({});
            if (data.player_bans != null) {
                message.player_bans = data.player_bans.map(item => dependency_4.player.PlayerBan.fromObject(item));
            }
            if (data.next_id != null) {
                message.next_id = dependency_1.google.protobuf.Int32Value.fromObject(data.next_id);
            }
            return message;
        }
        toObject() {
            const data: {
                player_bans?: ReturnType<typeof dependency_4.player.PlayerBan.prototype.toObject>[];
                next_id?: ReturnType<typeof dependency_1.google.protobuf.Int32Value.prototype.toObject>;
            } = {};
            if (this.player_bans != null) {
                data.player_bans = this.player_bans.map((item: dependency_4.player.PlayerBan) => item.toObject());
            }
            if (this.next_id != null) {
                data.next_id = this.next_id.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.player_bans.length)
                writer.writeRepeatedMessage(1, this.player_bans, (item: dependency_4.player.PlayerBan) => item.serialize(writer));
            if (this.has_next_id)
                writer.writeMessage(2, this.next_id, () => this.next_id.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListPlayerBansReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListPlayerBansReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.player_bans, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.player.PlayerBan.deserialize(reader), dependency_4.player.PlayerBan));
                        break;
                    case 2:
                        reader.readMessage(message.next_id, () => message.next_id = dependency_1.google.protobuf.Int32Value.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListPlayerBansReply {
            return ListPlayerBansReply.deserialize(bytes);
        }
    }
    export class CreatePlayerBanRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player_id?: number;
            ban_type?: dependency_4.player.PlayerBanType;
            ban_expires_at?: dependency_3.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player_id" in data && data.player_id != undefined) {
                    this.player_id = data.player_id;
                }
                if ("ban_type" in data && data.ban_type != undefined) {
                    this.ban_type = data.ban_type;
                }
                if ("ban_expires_at" in data && data.ban_expires_at != undefined) {
                    this.ban_expires_at = data.ban_expires_at;
                }
            }
        }
        get player_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set player_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get ban_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_4.player.PlayerBanType.PlayerBanTypeChat) as dependency_4.player.PlayerBanType;
        }
        set ban_type(value: dependency_4.player.PlayerBanType) {
            pb_1.Message.setField(this, 3, value);
        }
        get ban_expires_at() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 4) as dependency_3.google.protobuf.Timestamp;
        }
        set ban_expires_at(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_ban_expires_at() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            player_id?: number;
            ban_type?: dependency_4.player.PlayerBanType;
            ban_expires_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
        }): CreatePlayerBanRequest {
            const message = new CreatePlayerBanRequest({});
            if (data.player_id != null) {
                message.player_id = data.player_id;
            }
            if (data.ban_type != null) {
                message.ban_type = data.ban_type;
            }
            if (data.ban_expires_at != null) {
                message.ban_expires_at = dependency_3.google.protobuf.Timestamp.fromObject(data.ban_expires_at);
            }
            return message;
        }
        toObject() {
            const data: {
                player_id?: number;
                ban_type?: dependency_4.player.PlayerBanType;
                ban_expires_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.player_id != null) {
                data.player_id = this.player_id;
            }
            if (this.ban_type != null) {
                data.ban_type = this.ban_type;
            }
            if (this.ban_expires_at != null) {
                data.ban_expires_at = this.ban_expires_at.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.player_id != 0)
                writer.writeInt32(1, this.player_id);
            if (this.ban_type != dependency_4.player.PlayerBanType.PlayerBanTypeChat)
                writer.writeEnum(3, this.ban_type);
            if (this.has_ban_expires_at)
                writer.writeMessage(4, this.ban_expires_at, () => this.ban_expires_at.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreatePlayerBanRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreatePlayerBanRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.player_id = reader.readInt32();
                        break;
                    case 3:
                        message.ban_type = reader.readEnum();
                        break;
                    case 4:
                        reader.readMessage(message.ban_expires_at, () => message.ban_expires_at = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreatePlayerBanRequest {
            return CreatePlayerBanRequest.deserialize(bytes);
        }
    }
    export class RemovePlayerBanRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): RemovePlayerBanRequest {
            const message = new RemovePlayerBanRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemovePlayerBanRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemovePlayerBanRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemovePlayerBanRequest {
            return RemovePlayerBanRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedFloControllerService {
        static definition = {
            GetPlayer: {
                path: "/controller.FloController/GetPlayer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetPlayerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetPlayerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetPlayerReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetPlayerReply.deserialize(new Uint8Array(bytes))
            },
            GetPlayerByToken: {
                path: "/controller.FloController/GetPlayerByToken",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetPlayerByTokenRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetPlayerByTokenRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetPlayerReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetPlayerReply.deserialize(new Uint8Array(bytes))
            },
            GetPlayersBySourceIds: {
                path: "/controller.FloController/GetPlayersBySourceIds",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetPlayersBySourceIdsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetPlayersBySourceIdsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetPlayersBySourceIdsReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetPlayersBySourceIdsReply.deserialize(new Uint8Array(bytes))
            },
            GetPlayerPingMaps: {
                path: "/controller.FloController/GetPlayerPingMaps",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetPlayerPingMapsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetPlayerPingMapsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetPlayerPingMapsReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetPlayerPingMapsReply.deserialize(new Uint8Array(bytes))
            },
            UpdateAndGetPlayer: {
                path: "/controller.FloController/UpdateAndGetPlayer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateAndGetPlayerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateAndGetPlayerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateAndGetPlayerReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateAndGetPlayerReply.deserialize(new Uint8Array(bytes))
            },
            ListNodes: {
                path: "/controller.FloController/ListNodes",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListNodesReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListNodesReply.deserialize(new Uint8Array(bytes))
            },
            ListGames: {
                path: "/controller.FloController/ListGames",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListGamesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListGamesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListGamesReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListGamesReply.deserialize(new Uint8Array(bytes))
            },
            GetGame: {
                path: "/controller.FloController/GetGame",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetGameRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetGameRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetGameReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetGameReply.deserialize(new Uint8Array(bytes))
            },
            CreateGame: {
                path: "/controller.FloController/CreateGame",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateGameRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateGameRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateGameReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateGameReply.deserialize(new Uint8Array(bytes))
            },
            CreateGameAsBot: {
                path: "/controller.FloController/CreateGameAsBot",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateGameAsBotRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateGameAsBotRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateGameAsBotReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateGameAsBotReply.deserialize(new Uint8Array(bytes))
            },
            StartGameAsBot: {
                path: "/controller.FloController/StartGameAsBot",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: StartGameAsBotRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => StartGameAsBotRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StartGameAsBotReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StartGameAsBotReply.deserialize(new Uint8Array(bytes))
            },
            JoinGame: {
                path: "/controller.FloController/JoinGame",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: JoinGameRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => JoinGameRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: JoinGameReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => JoinGameReply.deserialize(new Uint8Array(bytes))
            },
            CreateJoinGameToken: {
                path: "/controller.FloController/CreateJoinGameToken",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateJoinGameTokenRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateJoinGameTokenRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateJoinGameTokenReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateJoinGameTokenReply.deserialize(new Uint8Array(bytes))
            },
            JoinGameByToken: {
                path: "/controller.FloController/JoinGameByToken",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: JoinGameByTokenRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => JoinGameByTokenRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: JoinGameReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => JoinGameReply.deserialize(new Uint8Array(bytes))
            },
            LeaveGame: {
                path: "/controller.FloController/LeaveGame",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LeaveGameRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LeaveGameRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            SelectGameNode: {
                path: "/controller.FloController/SelectGameNode",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SelectGameNodeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SelectGameNodeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            CancelGame: {
                path: "/controller.FloController/CancelGame",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CancelGameRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CancelGameRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            CancelGameAsBot: {
                path: "/controller.FloController/CancelGameAsBot",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CancelGameAsBotRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CancelGameAsBotRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            ImportMapChecksums: {
                path: "/controller.FloController/ImportMapChecksums",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ImportMapChecksumsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ImportMapChecksumsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ImportMapChecksumsReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ImportMapChecksumsReply.deserialize(new Uint8Array(bytes))
            },
            SearchMapChecksum: {
                path: "/controller.FloController/SearchMapChecksum",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SearchMapChecksumRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SearchMapChecksumRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SearchMapChecksumReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SearchMapChecksumReply.deserialize(new Uint8Array(bytes))
            },
            Reload: {
                path: "/controller.FloController/Reload",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            ListPlayerBans: {
                path: "/controller.FloController/ListPlayerBans",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListPlayerBansRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListPlayerBansRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListPlayerBansReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListPlayerBansReply.deserialize(new Uint8Array(bytes))
            },
            CreatePlayerBan: {
                path: "/controller.FloController/CreatePlayerBan",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreatePlayerBanRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreatePlayerBanRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            RemovePlayerBan: {
                path: "/controller.FloController/RemovePlayerBan",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RemovePlayerBanRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RemovePlayerBanRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetPlayer(call: grpc_1.ServerUnaryCall<GetPlayerRequest, GetPlayerReply>, callback: grpc_1.sendUnaryData<GetPlayerReply>): void;
        abstract GetPlayerByToken(call: grpc_1.ServerUnaryCall<GetPlayerByTokenRequest, GetPlayerReply>, callback: grpc_1.sendUnaryData<GetPlayerReply>): void;
        abstract GetPlayersBySourceIds(call: grpc_1.ServerUnaryCall<GetPlayersBySourceIdsRequest, GetPlayersBySourceIdsReply>, callback: grpc_1.sendUnaryData<GetPlayersBySourceIdsReply>): void;
        abstract GetPlayerPingMaps(call: grpc_1.ServerUnaryCall<GetPlayerPingMapsRequest, GetPlayerPingMapsReply>, callback: grpc_1.sendUnaryData<GetPlayerPingMapsReply>): void;
        abstract UpdateAndGetPlayer(call: grpc_1.ServerUnaryCall<UpdateAndGetPlayerRequest, UpdateAndGetPlayerReply>, callback: grpc_1.sendUnaryData<UpdateAndGetPlayerReply>): void;
        abstract ListNodes(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, ListNodesReply>, callback: grpc_1.sendUnaryData<ListNodesReply>): void;
        abstract ListGames(call: grpc_1.ServerUnaryCall<ListGamesRequest, ListGamesReply>, callback: grpc_1.sendUnaryData<ListGamesReply>): void;
        abstract GetGame(call: grpc_1.ServerUnaryCall<GetGameRequest, GetGameReply>, callback: grpc_1.sendUnaryData<GetGameReply>): void;
        abstract CreateGame(call: grpc_1.ServerUnaryCall<CreateGameRequest, CreateGameReply>, callback: grpc_1.sendUnaryData<CreateGameReply>): void;
        abstract CreateGameAsBot(call: grpc_1.ServerUnaryCall<CreateGameAsBotRequest, CreateGameAsBotReply>, callback: grpc_1.sendUnaryData<CreateGameAsBotReply>): void;
        abstract StartGameAsBot(call: grpc_1.ServerUnaryCall<StartGameAsBotRequest, StartGameAsBotReply>, callback: grpc_1.sendUnaryData<StartGameAsBotReply>): void;
        abstract JoinGame(call: grpc_1.ServerUnaryCall<JoinGameRequest, JoinGameReply>, callback: grpc_1.sendUnaryData<JoinGameReply>): void;
        abstract CreateJoinGameToken(call: grpc_1.ServerUnaryCall<CreateJoinGameTokenRequest, CreateJoinGameTokenReply>, callback: grpc_1.sendUnaryData<CreateJoinGameTokenReply>): void;
        abstract JoinGameByToken(call: grpc_1.ServerUnaryCall<JoinGameByTokenRequest, JoinGameReply>, callback: grpc_1.sendUnaryData<JoinGameReply>): void;
        abstract LeaveGame(call: grpc_1.ServerUnaryCall<LeaveGameRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract SelectGameNode(call: grpc_1.ServerUnaryCall<SelectGameNodeRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract CancelGame(call: grpc_1.ServerUnaryCall<CancelGameRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract CancelGameAsBot(call: grpc_1.ServerUnaryCall<CancelGameAsBotRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract ImportMapChecksums(call: grpc_1.ServerUnaryCall<ImportMapChecksumsRequest, ImportMapChecksumsReply>, callback: grpc_1.sendUnaryData<ImportMapChecksumsReply>): void;
        abstract SearchMapChecksum(call: grpc_1.ServerUnaryCall<SearchMapChecksumRequest, SearchMapChecksumReply>, callback: grpc_1.sendUnaryData<SearchMapChecksumReply>): void;
        abstract Reload(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract ListPlayerBans(call: grpc_1.ServerUnaryCall<ListPlayerBansRequest, ListPlayerBansReply>, callback: grpc_1.sendUnaryData<ListPlayerBansReply>): void;
        abstract CreatePlayerBan(call: grpc_1.ServerUnaryCall<CreatePlayerBanRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract RemovePlayerBan(call: grpc_1.ServerUnaryCall<RemovePlayerBanRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
    }
    export class FloControllerClient extends grpc_1.makeGenericClientConstructor(UnimplementedFloControllerService.definition, "FloController", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetPlayer: GrpcUnaryServiceInterface<GetPlayerRequest, GetPlayerReply> = (message: GetPlayerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetPlayerReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetPlayerReply>, callback?: grpc_1.requestCallback<GetPlayerReply>): grpc_1.ClientUnaryCall => {
            return super.GetPlayer(message, metadata, options, callback);
        };
        GetPlayerByToken: GrpcUnaryServiceInterface<GetPlayerByTokenRequest, GetPlayerReply> = (message: GetPlayerByTokenRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetPlayerReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetPlayerReply>, callback?: grpc_1.requestCallback<GetPlayerReply>): grpc_1.ClientUnaryCall => {
            return super.GetPlayerByToken(message, metadata, options, callback);
        };
        GetPlayersBySourceIds: GrpcUnaryServiceInterface<GetPlayersBySourceIdsRequest, GetPlayersBySourceIdsReply> = (message: GetPlayersBySourceIdsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetPlayersBySourceIdsReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetPlayersBySourceIdsReply>, callback?: grpc_1.requestCallback<GetPlayersBySourceIdsReply>): grpc_1.ClientUnaryCall => {
            return super.GetPlayersBySourceIds(message, metadata, options, callback);
        };
        GetPlayerPingMaps: GrpcUnaryServiceInterface<GetPlayerPingMapsRequest, GetPlayerPingMapsReply> = (message: GetPlayerPingMapsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetPlayerPingMapsReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetPlayerPingMapsReply>, callback?: grpc_1.requestCallback<GetPlayerPingMapsReply>): grpc_1.ClientUnaryCall => {
            return super.GetPlayerPingMaps(message, metadata, options, callback);
        };
        UpdateAndGetPlayer: GrpcUnaryServiceInterface<UpdateAndGetPlayerRequest, UpdateAndGetPlayerReply> = (message: UpdateAndGetPlayerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateAndGetPlayerReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateAndGetPlayerReply>, callback?: grpc_1.requestCallback<UpdateAndGetPlayerReply>): grpc_1.ClientUnaryCall => {
            return super.UpdateAndGetPlayer(message, metadata, options, callback);
        };
        ListNodes: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, ListNodesReply> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListNodesReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListNodesReply>, callback?: grpc_1.requestCallback<ListNodesReply>): grpc_1.ClientUnaryCall => {
            return super.ListNodes(message, metadata, options, callback);
        };
        ListGames: GrpcUnaryServiceInterface<ListGamesRequest, ListGamesReply> = (message: ListGamesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListGamesReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListGamesReply>, callback?: grpc_1.requestCallback<ListGamesReply>): grpc_1.ClientUnaryCall => {
            return super.ListGames(message, metadata, options, callback);
        };
        GetGame: GrpcUnaryServiceInterface<GetGameRequest, GetGameReply> = (message: GetGameRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetGameReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetGameReply>, callback?: grpc_1.requestCallback<GetGameReply>): grpc_1.ClientUnaryCall => {
            return super.GetGame(message, metadata, options, callback);
        };
        CreateGame: GrpcUnaryServiceInterface<CreateGameRequest, CreateGameReply> = (message: CreateGameRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateGameReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateGameReply>, callback?: grpc_1.requestCallback<CreateGameReply>): grpc_1.ClientUnaryCall => {
            return super.CreateGame(message, metadata, options, callback);
        };
        CreateGameAsBot: GrpcUnaryServiceInterface<CreateGameAsBotRequest, CreateGameAsBotReply> = (message: CreateGameAsBotRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateGameAsBotReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateGameAsBotReply>, callback?: grpc_1.requestCallback<CreateGameAsBotReply>): grpc_1.ClientUnaryCall => {
            return super.CreateGameAsBot(message, metadata, options, callback);
        };
        StartGameAsBot: GrpcUnaryServiceInterface<StartGameAsBotRequest, StartGameAsBotReply> = (message: StartGameAsBotRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StartGameAsBotReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StartGameAsBotReply>, callback?: grpc_1.requestCallback<StartGameAsBotReply>): grpc_1.ClientUnaryCall => {
            return super.StartGameAsBot(message, metadata, options, callback);
        };
        JoinGame: GrpcUnaryServiceInterface<JoinGameRequest, JoinGameReply> = (message: JoinGameRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<JoinGameReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<JoinGameReply>, callback?: grpc_1.requestCallback<JoinGameReply>): grpc_1.ClientUnaryCall => {
            return super.JoinGame(message, metadata, options, callback);
        };
        CreateJoinGameToken: GrpcUnaryServiceInterface<CreateJoinGameTokenRequest, CreateJoinGameTokenReply> = (message: CreateJoinGameTokenRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateJoinGameTokenReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateJoinGameTokenReply>, callback?: grpc_1.requestCallback<CreateJoinGameTokenReply>): grpc_1.ClientUnaryCall => {
            return super.CreateJoinGameToken(message, metadata, options, callback);
        };
        JoinGameByToken: GrpcUnaryServiceInterface<JoinGameByTokenRequest, JoinGameReply> = (message: JoinGameByTokenRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<JoinGameReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<JoinGameReply>, callback?: grpc_1.requestCallback<JoinGameReply>): grpc_1.ClientUnaryCall => {
            return super.JoinGameByToken(message, metadata, options, callback);
        };
        LeaveGame: GrpcUnaryServiceInterface<LeaveGameRequest, dependency_2.google.protobuf.Empty> = (message: LeaveGameRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.LeaveGame(message, metadata, options, callback);
        };
        SelectGameNode: GrpcUnaryServiceInterface<SelectGameNodeRequest, dependency_2.google.protobuf.Empty> = (message: SelectGameNodeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.SelectGameNode(message, metadata, options, callback);
        };
        CancelGame: GrpcUnaryServiceInterface<CancelGameRequest, dependency_2.google.protobuf.Empty> = (message: CancelGameRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.CancelGame(message, metadata, options, callback);
        };
        CancelGameAsBot: GrpcUnaryServiceInterface<CancelGameAsBotRequest, dependency_2.google.protobuf.Empty> = (message: CancelGameAsBotRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.CancelGameAsBot(message, metadata, options, callback);
        };
        ImportMapChecksums: GrpcUnaryServiceInterface<ImportMapChecksumsRequest, ImportMapChecksumsReply> = (message: ImportMapChecksumsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ImportMapChecksumsReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ImportMapChecksumsReply>, callback?: grpc_1.requestCallback<ImportMapChecksumsReply>): grpc_1.ClientUnaryCall => {
            return super.ImportMapChecksums(message, metadata, options, callback);
        };
        SearchMapChecksum: GrpcUnaryServiceInterface<SearchMapChecksumRequest, SearchMapChecksumReply> = (message: SearchMapChecksumRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SearchMapChecksumReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SearchMapChecksumReply>, callback?: grpc_1.requestCallback<SearchMapChecksumReply>): grpc_1.ClientUnaryCall => {
            return super.SearchMapChecksum(message, metadata, options, callback);
        };
        Reload: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, dependency_2.google.protobuf.Empty> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Reload(message, metadata, options, callback);
        };
        ListPlayerBans: GrpcUnaryServiceInterface<ListPlayerBansRequest, ListPlayerBansReply> = (message: ListPlayerBansRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListPlayerBansReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListPlayerBansReply>, callback?: grpc_1.requestCallback<ListPlayerBansReply>): grpc_1.ClientUnaryCall => {
            return super.ListPlayerBans(message, metadata, options, callback);
        };
        CreatePlayerBan: GrpcUnaryServiceInterface<CreatePlayerBanRequest, dependency_2.google.protobuf.Empty> = (message: CreatePlayerBanRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.CreatePlayerBan(message, metadata, options, callback);
        };
        RemovePlayerBan: GrpcUnaryServiceInterface<RemovePlayerBanRequest, dependency_2.google.protobuf.Empty> = (message: RemovePlayerBanRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.RemovePlayerBan(message, metadata, options, callback);
        };
    }
}
