/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.6
 * source: player.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/wrappers";
import * as dependency_2 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace player {
    export enum PlayerSource {
        PlayerSourceTest = 0,
        PlayerSourceBNet = 1,
        PlayerSourceApi = 2
    }
    export enum PlayerBanType {
        PlayerBanTypeChat = 0
    }
    export class Player extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            source?: PlayerSource;
            source_id?: string;
            source_state?: PlayerSourceState;
            realm?: dependency_1.google.protobuf.StringValue;
            created_at?: dependency_2.google.protobuf.Timestamp;
            updated_at?: dependency_2.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("source_id" in data && data.source_id != undefined) {
                    this.source_id = data.source_id;
                }
                if ("source_state" in data && data.source_state != undefined) {
                    this.source_state = data.source_state;
                }
                if ("realm" in data && data.realm != undefined) {
                    this.realm = data.realm;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 3, PlayerSource.PlayerSourceTest) as PlayerSource;
        }
        set source(value: PlayerSource) {
            pb_1.Message.setField(this, 3, value);
        }
        get source_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set source_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get source_state() {
            return pb_1.Message.getWrapperField(this, PlayerSourceState, 5) as PlayerSourceState;
        }
        set source_state(value: PlayerSourceState) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_source_state() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get realm() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.StringValue, 6) as dependency_1.google.protobuf.StringValue;
        }
        set realm(value: dependency_1.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_realm() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get created_at() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 7) as dependency_2.google.protobuf.Timestamp;
        }
        set created_at(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_created_at() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get updated_at() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 8) as dependency_2.google.protobuf.Timestamp;
        }
        set updated_at(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_updated_at() {
            return pb_1.Message.getField(this, 8) != null;
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            source?: PlayerSource;
            source_id?: string;
            source_state?: ReturnType<typeof PlayerSourceState.prototype.toObject>;
            realm?: ReturnType<typeof dependency_1.google.protobuf.StringValue.prototype.toObject>;
            created_at?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            updated_at?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
        }): Player {
            const message = new Player({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.source_id != null) {
                message.source_id = data.source_id;
            }
            if (data.source_state != null) {
                message.source_state = PlayerSourceState.fromObject(data.source_state);
            }
            if (data.realm != null) {
                message.realm = dependency_1.google.protobuf.StringValue.fromObject(data.realm);
            }
            if (data.created_at != null) {
                message.created_at = dependency_2.google.protobuf.Timestamp.fromObject(data.created_at);
            }
            if (data.updated_at != null) {
                message.updated_at = dependency_2.google.protobuf.Timestamp.fromObject(data.updated_at);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                source?: PlayerSource;
                source_id?: string;
                source_state?: ReturnType<typeof PlayerSourceState.prototype.toObject>;
                realm?: ReturnType<typeof dependency_1.google.protobuf.StringValue.prototype.toObject>;
                created_at?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                updated_at?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.source_id != null) {
                data.source_id = this.source_id;
            }
            if (this.source_state != null) {
                data.source_state = this.source_state.toObject();
            }
            if (this.realm != null) {
                data.realm = this.realm.toObject();
            }
            if (this.created_at != null) {
                data.created_at = this.created_at.toObject();
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.source != PlayerSource.PlayerSourceTest)
                writer.writeEnum(3, this.source);
            if (this.source_id.length)
                writer.writeString(4, this.source_id);
            if (this.has_source_state)
                writer.writeMessage(5, this.source_state, () => this.source_state.serialize(writer));
            if (this.has_realm)
                writer.writeMessage(6, this.realm, () => this.realm.serialize(writer));
            if (this.has_created_at)
                writer.writeMessage(7, this.created_at, () => this.created_at.serialize(writer));
            if (this.has_updated_at)
                writer.writeMessage(8, this.updated_at, () => this.updated_at.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Player {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Player();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.source = reader.readEnum();
                        break;
                    case 4:
                        message.source_id = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.source_state, () => message.source_state = PlayerSourceState.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.realm, () => message.realm = dependency_1.google.protobuf.StringValue.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.created_at, () => message.created_at = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.updated_at, () => message.updated_at = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Player {
            return Player.deserialize(bytes);
        }
    }
    export class PlayerSourceState extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            bnet?: BNetState;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bnet" in data && data.bnet != undefined) {
                    this.bnet = data.bnet;
                }
            }
        }
        get bnet() {
            return pb_1.Message.getWrapperField(this, BNetState, 1) as BNetState;
        }
        set bnet(value: BNetState) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_bnet() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get source_state_oneof() {
            const cases: {
                [index: number]: "none" | "bnet";
            } = {
                0: "none",
                1: "bnet"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            bnet?: ReturnType<typeof BNetState.prototype.toObject>;
        }): PlayerSourceState {
            const message = new PlayerSourceState({});
            if (data.bnet != null) {
                message.bnet = BNetState.fromObject(data.bnet);
            }
            return message;
        }
        toObject() {
            const data: {
                bnet?: ReturnType<typeof BNetState.prototype.toObject>;
            } = {};
            if (this.bnet != null) {
                data.bnet = this.bnet.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_bnet)
                writer.writeMessage(1, this.bnet, () => this.bnet.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerSourceState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerSourceState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.bnet, () => message.bnet = BNetState.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerSourceState {
            return PlayerSourceState.deserialize(bytes);
        }
    }
    export class PlayerRef extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            source?: PlayerSource;
            realm?: dependency_1.google.protobuf.StringValue;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("realm" in data && data.realm != undefined) {
                    this.realm = data.realm;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 3, PlayerSource.PlayerSourceTest) as PlayerSource;
        }
        set source(value: PlayerSource) {
            pb_1.Message.setField(this, 3, value);
        }
        get realm() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.StringValue, 5) as dependency_1.google.protobuf.StringValue;
        }
        set realm(value: dependency_1.google.protobuf.StringValue) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_realm() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            source?: PlayerSource;
            realm?: ReturnType<typeof dependency_1.google.protobuf.StringValue.prototype.toObject>;
        }): PlayerRef {
            const message = new PlayerRef({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.realm != null) {
                message.realm = dependency_1.google.protobuf.StringValue.fromObject(data.realm);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                source?: PlayerSource;
                realm?: ReturnType<typeof dependency_1.google.protobuf.StringValue.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.realm != null) {
                data.realm = this.realm.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.source != PlayerSource.PlayerSourceTest)
                writer.writeEnum(3, this.source);
            if (this.has_realm)
                writer.writeMessage(5, this.realm, () => this.realm.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerRef {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerRef();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.source = reader.readEnum();
                        break;
                    case 5:
                        reader.readMessage(message.realm, () => message.realm = dependency_1.google.protobuf.StringValue.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerRef {
            return PlayerRef.deserialize(bytes);
        }
    }
    export class BNetState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_id?: number;
            access_token?: string;
            access_token_exp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_id" in data && data.account_id != undefined) {
                    this.account_id = data.account_id;
                }
                if ("access_token" in data && data.access_token != undefined) {
                    this.access_token = data.access_token;
                }
                if ("access_token_exp" in data && data.access_token_exp != undefined) {
                    this.access_token_exp = data.access_token_exp;
                }
            }
        }
        get account_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set account_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get access_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set access_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get access_token_exp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set access_token_exp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            account_id?: number;
            access_token?: string;
            access_token_exp?: number;
        }): BNetState {
            const message = new BNetState({});
            if (data.account_id != null) {
                message.account_id = data.account_id;
            }
            if (data.access_token != null) {
                message.access_token = data.access_token;
            }
            if (data.access_token_exp != null) {
                message.access_token_exp = data.access_token_exp;
            }
            return message;
        }
        toObject() {
            const data: {
                account_id?: number;
                access_token?: string;
                access_token_exp?: number;
            } = {};
            if (this.account_id != null) {
                data.account_id = this.account_id;
            }
            if (this.access_token != null) {
                data.access_token = this.access_token;
            }
            if (this.access_token_exp != null) {
                data.access_token_exp = this.access_token_exp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account_id != 0)
                writer.writeUint64(1, this.account_id);
            if (this.access_token.length)
                writer.writeString(2, this.access_token);
            if (this.access_token_exp != 0)
                writer.writeUint64(3, this.access_token_exp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BNetState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BNetState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_id = reader.readUint64();
                        break;
                    case 2:
                        message.access_token = reader.readString();
                        break;
                    case 3:
                        message.access_token_exp = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BNetState {
            return BNetState.deserialize(bytes);
        }
    }
    export class PlayerPingMap extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player_id?: number;
            ping_map?: Map<number, PingStats>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player_id" in data && data.player_id != undefined) {
                    this.player_id = data.player_id;
                }
                if ("ping_map" in data && data.ping_map != undefined) {
                    this.ping_map = data.ping_map;
                }
            }
            if (!this.ping_map)
                this.ping_map = new Map();
        }
        get player_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set player_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get ping_map() {
            return pb_1.Message.getField(this, 3) as any as Map<number, PingStats>;
        }
        set ping_map(value: Map<number, PingStats>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        static fromObject(data: {
            player_id?: number;
            ping_map?: {
                [key: number]: ReturnType<typeof PingStats.prototype.toObject>;
            };
        }): PlayerPingMap {
            const message = new PlayerPingMap({});
            if (data.player_id != null) {
                message.player_id = data.player_id;
            }
            if (typeof data.ping_map == "object") {
                message.ping_map = new Map(Object.entries(data.ping_map).map(([key, value]) => [Number(key), PingStats.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                player_id?: number;
                ping_map?: {
                    [key: number]: ReturnType<typeof PingStats.prototype.toObject>;
                };
            } = {};
            if (this.player_id != null) {
                data.player_id = this.player_id;
            }
            if (this.ping_map.size > 0) {
                data.ping_map = Object.fromEntries(Array.from(this.ping_map).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.player_id != 0)
                writer.writeInt32(1, this.player_id);
            for (const [key, value] of this.ping_map) {
                writer.writeMessage(3, this.ping_map, () => {
                    writer.writeInt32(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerPingMap {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerPingMap();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.player_id = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.ping_map as any, reader, reader.readInt32, () => {
                            let value;
                            reader.readMessage(message, () => value = PingStats.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerPingMap {
            return PlayerPingMap.deserialize(bytes);
        }
    }
    export class PingStats extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            current?: dependency_1.google.protobuf.UInt32Value;
            avg?: dependency_1.google.protobuf.UInt32Value;
            min?: dependency_1.google.protobuf.UInt32Value;
            max?: dependency_1.google.protobuf.UInt32Value;
            loss_rate?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("current" in data && data.current != undefined) {
                    this.current = data.current;
                }
                if ("avg" in data && data.avg != undefined) {
                    this.avg = data.avg;
                }
                if ("min" in data && data.min != undefined) {
                    this.min = data.min;
                }
                if ("max" in data && data.max != undefined) {
                    this.max = data.max;
                }
                if ("loss_rate" in data && data.loss_rate != undefined) {
                    this.loss_rate = data.loss_rate;
                }
            }
        }
        get current() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 1) as dependency_1.google.protobuf.UInt32Value;
        }
        set current(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_current() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get avg() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 2) as dependency_1.google.protobuf.UInt32Value;
        }
        set avg(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_avg() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get min() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 3) as dependency_1.google.protobuf.UInt32Value;
        }
        set min(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_min() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get max() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.UInt32Value, 4) as dependency_1.google.protobuf.UInt32Value;
        }
        set max(value: dependency_1.google.protobuf.UInt32Value) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_max() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get loss_rate() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set loss_rate(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            current?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            avg?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            min?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            max?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
            loss_rate?: number;
        }): PingStats {
            const message = new PingStats({});
            if (data.current != null) {
                message.current = dependency_1.google.protobuf.UInt32Value.fromObject(data.current);
            }
            if (data.avg != null) {
                message.avg = dependency_1.google.protobuf.UInt32Value.fromObject(data.avg);
            }
            if (data.min != null) {
                message.min = dependency_1.google.protobuf.UInt32Value.fromObject(data.min);
            }
            if (data.max != null) {
                message.max = dependency_1.google.protobuf.UInt32Value.fromObject(data.max);
            }
            if (data.loss_rate != null) {
                message.loss_rate = data.loss_rate;
            }
            return message;
        }
        toObject() {
            const data: {
                current?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                avg?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                min?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                max?: ReturnType<typeof dependency_1.google.protobuf.UInt32Value.prototype.toObject>;
                loss_rate?: number;
            } = {};
            if (this.current != null) {
                data.current = this.current.toObject();
            }
            if (this.avg != null) {
                data.avg = this.avg.toObject();
            }
            if (this.min != null) {
                data.min = this.min.toObject();
            }
            if (this.max != null) {
                data.max = this.max.toObject();
            }
            if (this.loss_rate != null) {
                data.loss_rate = this.loss_rate;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_current)
                writer.writeMessage(1, this.current, () => this.current.serialize(writer));
            if (this.has_avg)
                writer.writeMessage(2, this.avg, () => this.avg.serialize(writer));
            if (this.has_min)
                writer.writeMessage(3, this.min, () => this.min.serialize(writer));
            if (this.has_max)
                writer.writeMessage(4, this.max, () => this.max.serialize(writer));
            if (this.loss_rate != 0)
                writer.writeFloat(5, this.loss_rate);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingStats {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingStats();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.current, () => message.current = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.avg, () => message.avg = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.min, () => message.min = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.max, () => message.max = dependency_1.google.protobuf.UInt32Value.deserialize(reader));
                        break;
                    case 5:
                        message.loss_rate = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PingStats {
            return PingStats.deserialize(bytes);
        }
    }
    export class PlayerBan extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            player?: PlayerRef;
            ban_type?: PlayerBanType;
            ban_expires_at?: dependency_2.google.protobuf.Timestamp;
            created_at?: dependency_2.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("player" in data && data.player != undefined) {
                    this.player = data.player;
                }
                if ("ban_type" in data && data.ban_type != undefined) {
                    this.ban_type = data.ban_type;
                }
                if ("ban_expires_at" in data && data.ban_expires_at != undefined) {
                    this.ban_expires_at = data.ban_expires_at;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get player() {
            return pb_1.Message.getWrapperField(this, PlayerRef, 2) as PlayerRef;
        }
        set player(value: PlayerRef) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_player() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get ban_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, PlayerBanType.PlayerBanTypeChat) as PlayerBanType;
        }
        set ban_type(value: PlayerBanType) {
            pb_1.Message.setField(this, 3, value);
        }
        get ban_expires_at() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 4) as dependency_2.google.protobuf.Timestamp;
        }
        set ban_expires_at(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_ban_expires_at() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get created_at() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 5) as dependency_2.google.protobuf.Timestamp;
        }
        set created_at(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_created_at() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            id?: number;
            player?: ReturnType<typeof PlayerRef.prototype.toObject>;
            ban_type?: PlayerBanType;
            ban_expires_at?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            created_at?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
        }): PlayerBan {
            const message = new PlayerBan({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.player != null) {
                message.player = PlayerRef.fromObject(data.player);
            }
            if (data.ban_type != null) {
                message.ban_type = data.ban_type;
            }
            if (data.ban_expires_at != null) {
                message.ban_expires_at = dependency_2.google.protobuf.Timestamp.fromObject(data.ban_expires_at);
            }
            if (data.created_at != null) {
                message.created_at = dependency_2.google.protobuf.Timestamp.fromObject(data.created_at);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                player?: ReturnType<typeof PlayerRef.prototype.toObject>;
                ban_type?: PlayerBanType;
                ban_expires_at?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                created_at?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.player != null) {
                data.player = this.player.toObject();
            }
            if (this.ban_type != null) {
                data.ban_type = this.ban_type;
            }
            if (this.ban_expires_at != null) {
                data.ban_expires_at = this.ban_expires_at.toObject();
            }
            if (this.created_at != null) {
                data.created_at = this.created_at.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.has_player)
                writer.writeMessage(2, this.player, () => this.player.serialize(writer));
            if (this.ban_type != PlayerBanType.PlayerBanTypeChat)
                writer.writeEnum(3, this.ban_type);
            if (this.has_ban_expires_at)
                writer.writeMessage(4, this.ban_expires_at, () => this.ban_expires_at.serialize(writer));
            if (this.has_created_at)
                writer.writeMessage(5, this.created_at, () => this.created_at.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerBan {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerBan();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message.player, () => message.player = PlayerRef.deserialize(reader));
                        break;
                    case 3:
                        message.ban_type = reader.readEnum();
                        break;
                    case 4:
                        reader.readMessage(message.ban_expires_at, () => message.ban_expires_at = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.created_at, () => message.created_at = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerBan {
            return PlayerBan.deserialize(bytes);
        }
    }
}
